openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API endpoints for user authentication and management

paths:
  /api/register:
    post:
      tags:
        - Users
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - age
                - email
                - password
              properties:
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
                age:
                  type: integer
                  example: 30
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "El usuario ya existe"

  /api/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario logeado correctamente"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Invalid credentials

  /api/sessions/current:
    get:
      tags:
        - Users
      summary: Get current user
      description: Get information about currently logged in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: User not found

  /api/recover-password:
    get:
      tags:
        - Users
      summary: Request password recovery
      description: Send password recovery email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '200':
          description: Recovery email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Mensaje de recuperacion enviado a john@example.com"
                  info:
                    type: object
        '400':
          description: User not found

  /api/reset-password/{token}:
    put:
      tags:
        - Users
      summary: Reset password
      description: Reset user password using recovery token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "newpassword123"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contrase√±a modificada con exito"
                  changedUser:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid token or request

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        age:
          type: integer
          example: 30
        cart:
          type: string
          example: "507f1f77bcf86cd799439012"
        role:
          type: string
          enum: [user, admin]
          example: "user"

    UserDTO:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          example: "user"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT